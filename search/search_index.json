{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"django-typescript","title":"Home"},{"location":"#django-typescript","text":"","title":"django-typescript"},{"location":"python/","text":"Python / Server Interfaces The Interface defines what ModelType 's and ObjectType 's will be exposed on the TypeScript side. Two things are mandatory: The subclass of interface.Interface is also called Interface A transpile_dest keyword argument must be supplied to the subclasses class init arguments. This tells the transpiler where the transpiled code should go. from django_typescript import interface from .models import SomeModel class Interface(interface.Interface, transpile_dest='src/...'): some_model = interface.ModelType(model_cls=SomeModel) Model Types The ModelType class is used to specify a Django Model that will be transpiled to a TypeScript representation. It creates the views and url patterns necessary to excute model logic via TypeScript. The views correspond to the following actions: Get Get or create Create Update Delete List (and filter) It takes the following init arguments: model_cls - The associated Django Model class. create_permissions - An optional tuple of rest_framework permission classes to assign to the 'create' and 'get or create' view. get_permissions - An optional tuple of rest_framework permission classes to assign to the 'get' view. delete_permissions - An optional tuple of rest_framework permission classes to assign to the 'delete' view. update_permissions - An optional tuple of rest_framework permission classes to assign to the 'get' update A ModelType can be defined in two different ways: 'class-based' and 'inline'. Note that their respective Interface assignments are different. The class-based definition requires using the ModelType.as_type() class method. Class Based Definition All init arguments are passed to the class init arguments. from django_typescript import interface from myapp.models import User class UserModelType(interface.ModelType, model_cls=User): pass class Interface(interface.Interface): users = UserModelType.as_type() Inline Definition from django_typescript import interface from myapp.models import User class Interface(interface.Interface): users = interface.ModelType(model_cls=User)","title":"Python"},{"location":"python/#python-server","text":"","title":"Python / Server"},{"location":"python/#interfaces","text":"The Interface defines what ModelType 's and ObjectType 's will be exposed on the TypeScript side. Two things are mandatory: The subclass of interface.Interface is also called Interface A transpile_dest keyword argument must be supplied to the subclasses class init arguments. This tells the transpiler where the transpiled code should go. from django_typescript import interface from .models import SomeModel class Interface(interface.Interface, transpile_dest='src/...'): some_model = interface.ModelType(model_cls=SomeModel)","title":"Interfaces"},{"location":"python/#model-types","text":"The ModelType class is used to specify a Django Model that will be transpiled to a TypeScript representation. It creates the views and url patterns necessary to excute model logic via TypeScript. The views correspond to the following actions: Get Get or create Create Update Delete List (and filter) It takes the following init arguments: model_cls - The associated Django Model class. create_permissions - An optional tuple of rest_framework permission classes to assign to the 'create' and 'get or create' view. get_permissions - An optional tuple of rest_framework permission classes to assign to the 'get' view. delete_permissions - An optional tuple of rest_framework permission classes to assign to the 'delete' view. update_permissions - An optional tuple of rest_framework permission classes to assign to the 'get' update A ModelType can be defined in two different ways: 'class-based' and 'inline'. Note that their respective Interface assignments are different. The class-based definition requires using the ModelType.as_type() class method.","title":"Model Types"},{"location":"python/#class-based-definition","text":"All init arguments are passed to the class init arguments. from django_typescript import interface from myapp.models import User class UserModelType(interface.ModelType, model_cls=User): pass class Interface(interface.Interface): users = UserModelType.as_type()","title":"Class Based Definition"},{"location":"python/#inline-definition","text":"from django_typescript import interface from myapp.models import User class Interface(interface.Interface): users = interface.ModelType(model_cls=User)","title":"Inline Definition"}]}